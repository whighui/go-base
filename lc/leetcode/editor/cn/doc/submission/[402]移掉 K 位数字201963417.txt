class Solution {
    public String removeKdigits(String num, int k) {
        Stack<Integer>stack=new Stack<>();
        for(int i=0;i<num.length();i++){
            int number = num.charAt(i)-'0';
            //可能好几个值都比当前值大，那么我们就在k允许的情况下，去去除它。
            while(!stack.isEmpty() && k>0 && number<stack.peek()){
                stack.pop();
                k--;
            }
            if(number!=0||!stack.isEmpty()){
                stack.push(number);
            }
        }
        //56789这种情况，前面一直比后面小，那就去除栈顶，谁让栈顶最大
        while(k>0 && !stack.isEmpty()){
            stack.pop();
            k--;
        }
        //10，1(当now=0时，满足条件，去掉1，但now为0，且为空。)
        if(stack.isEmpty())
            return "0";
        StringBuilder sb=new StringBuilder();
        while(!stack.isEmpty())
            sb.append(stack.pop());
        //从后往前添加所以我们要逆序
        return sb.reverse().toString();
    }
}
//runtime:9 ms
//memory:38.6 MB
