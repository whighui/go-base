/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        //这个就是跟分割链表那个题就是有点很像的味道  思路：虚拟头节点 之后遍历两个链表 指针移动 最后就是合并成一个链表呗 
        ListNode virtualHead=new ListNode(0);  //这里创建的虚拟头节点就是一定不能为Null  否则就是会报出空指针异常呗 对吧哈

        ListNode head=virtualHead;

        //这里边就是需要考虑 就是一个节点要是先走完了 就是该怎么办哈
      
        while(l1!=null&&l2!=null){
            if(l1.val<l2.val){
                virtualHead.next=l1;
                l1=l1.next;
                virtualHead=virtualHead.next;
            }else{
                virtualHead.next=l2;
                l2=l2.next;
                virtualHead=virtualHead.next;            }
        }

        if(l1!=null){
            virtualHead.next=l1;
        }
        if(l2!=null){
            virtualHead.next=l2;
        }

        return head.next;
    }
}
//runtime:1 ms
//memory:38.4 MB
