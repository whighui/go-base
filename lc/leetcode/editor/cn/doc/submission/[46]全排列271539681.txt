class Solution {
    public  List<List<Integer>> permute(int[] nums) {
        if (nums == null || nums.length == 0) return null;
        List<List<Integer>> ret = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        boolean[] visited = new boolean[nums.length];
        dfs(nums,visited,list,ret);
        return ret;
    }

    public void dfs(int[] nums, boolean[] visited, List<Integer> list, List<List<Integer>> ret) {

        if (list.size() == nums.length) {
            ret.add(new ArrayList<>(list));
            return;
        }

        for (int i = 0; i < nums.length; i++) {
            if (visited[i]) continue;
            list.add(nums[i]);
            visited[i] = true;
            dfs(nums, visited, list, ret);
            visited[i] = false;
            list.remove(list.size() - 1);
        }
    }
}
//runtime:1 ms
//memory:41.7 MB
