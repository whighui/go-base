/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    /**
    时间复杂度：O(N^2)
其中 N 是树的节点数。在最坏情况下，树的上半部分为链状，下半部分为完全二叉树，并且从根节点到每一个叶子节点的路径都符合题目要求。此时，路径的数目为 O(N)，并且每一条路径的节点个数也为 O(N)，因此要将这些路径全部添加进答案中，时间复杂度为 O(N^2)

空间复杂度：O(N)，其中 N 是树的节点数。空间复杂度主要取决于栈空间的开销，栈中的元素个数不会超过树的节点数。

     */
    private List<List<Integer>> res=new LinkedList<>();

    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root==null) return res;
        dfs(root,new LinkedList<Integer>(),targetSum);
        return res;
    }

    private void dfs(TreeNode root, LinkedList<Integer> list,int targetSum){
        if(root==null) return;

        list.add(root.val);
        targetSum=targetSum-root.val;

        if(root.left==null && root.right==null && targetSum==0){
            res.add(new LinkedList<>(list));    //这里边就是不能够加return呢 如果加return这里边的最后一个元素就是移除不掉
            list.removeLast();
            return;
        }

       if(root.left!=null) dfs(root.left,list,targetSum);      //这里边就是可以进行一下剪枝操作呗
       if(root.right!=null) dfs(root.right,list,targetSum);
       list.removeLast();
    }
}
//runtime:1 ms
//memory:38.7 MB
