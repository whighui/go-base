func permuteUnique(nums []int) [][]int {
	sort.Ints(nums)
	arr := make([]int, 0)
	var res [][]int = make([][]int, 0) //直接声明一个局部变量在这里就是比较好呢
	visited := make([]bool, len(nums))
	backTrace(nums, visited, &arr, &res)
	return res
}

func backTrace(nums []int, visited []bool, arr *[]int, res *[][]int) {

	if len(*arr) == len(nums) {
		temp := make([]int, len(*arr))
		copy(temp, *arr)
		*res = append(*res, temp)
		return
	}

	for i := 0; i < len(nums); i++ {
		if visited[i] {
			continue
		}
		if i > 0 && nums[i] == nums[i-1] && visited[i-1] == false {
			continue
		}
		*arr = append(*arr, nums[i])
		visited[i] = true
		backTrace(nums, visited, arr, res)
		*arr = (*arr)[0 : len(*arr)-1]
		visited[i] = false
	}
}
//runtime:0 ms
//memory:3.7 MB
