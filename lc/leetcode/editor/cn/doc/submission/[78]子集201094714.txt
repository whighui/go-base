class Solution {
    public List<List<Integer>> subsets(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        for (int i = 0; i < nums.length; i++) {
           int all = res.size();
            for (int j = 0; j < all; j++) {
                List<Integer> tmp = new ArrayList<>(res.get(j));
                tmp.add(nums[i]);
                res.add(tmp);
            }
        }
        return res;
    }

    // public List<List<Integer>> subsets(int[] nums) {

    //     List<Integer> list = new ArrayList<>();
    //     List<List<Integer>> res = new ArrayList<>();

    //     backTrace(nums, 0, list, res);
    //     res.add(new LinkedList<>());
    //     return res;
    // }
        
    // private void backTrace(int[] nums, int index, List<Integer> list, List<List<Integer>> res) {

    //     if(index== nums.length) return;

    //     for (int i = index; i < nums.length; i++) {
    //         list.add(nums[i]);
    //         res.add(new LinkedList<>(list));
    //         backTrace(nums, i+1, list, res);         
    //         list.remove(list.size() - 1);
    //     }
    // }

}
//runtime:0 ms
//memory:38.6 MB
